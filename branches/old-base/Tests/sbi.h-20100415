/*
* Copyright (c) 2007 Erin Catto http://www.gphysics.com
*
* This software is provided 'as-is', without any express or implied
* warranty.  In no event will the authors be held liable for any damages
* arising from the use of this software.
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely, subject to the following restrictions:
* 1. The origin of this software must not be misrepresented; you must not
* claim that you wrote the original software. If you use this software
* in a product, an acknowledgment in the product documentation would be
* appreciated but is not required.
* 2. Altered source versions must be plainly marked as such, and must not be
* misrepresented as being the original software.
* 3. This notice may not be removed or altered from any source distribution.
*/
/* Wrote a little Test setup for Box2D TestBed */

#ifndef SBI_H
#define SBI_H

#include <cstdlib>
#include <ctime>
#include <list>
#include "../Framework/Neural.h"
using namespace std;

//enum LR { LEFT, RIGHT };

class SBI : public Test
{
	public:
	SBI()
	{
		// set neural network
		network = new Neural(inNodes, hiddenNodes, outNodes, iterations);
	
		// set rand
		srand(time(NULL));
	
		// set ground
		b2Body* ground = NULL;
		{
			b2PolygonDef sd;
			sd.SetAsBox(50.0f, 10.0f); // x both ways, y both ways from 0,0

			b2BodyDef bd;
			bd.position.Set(0.0f, -10.0f); // x, y
			ground = m_world->CreateBody(&bd);
			ground->CreateShape(&sd);
		}
		
		MakeFigure();
	}
	
	void MakeFigure() {
		// body
		bodyHeight = 0.5f;
		halfBodyHeight.Set(0.0f, 0.8f);
		bodyWidth = 3.0f;
		halfBodyWidth.Set(1.5f, 0.0f);
		
		bodyStartHeight.Set(0.0f, 8.0f);
	
		//m_offset.Set(0.0f, 8.0f);
		m_motorSpeed = 2.0f;
		m_motorOn = true;
		//n_motors = 2;
		//max_dist = 5;
		
		// chassis
		{
			b2PolygonDef sd;
			sd.density = 1.0f;
			sd.SetAsBox(bodyWidth, bodyHeight);
			sd.filter.groupIndex = -1;
			b2BodyDef bd;
			bd.position = bodyStartHeight;
			body = m_world->CreateBody(&bd);
			body->CreateShape(&sd);
			body->SetMassFromShapes();
		}
		
		// wheel 1
		b2Vec2 left(-bodyWidth, 0.0f);
		{
			b2CircleDef sd;
			sd.density = 1.0f;
			sd.radius = 0.5f;
			sd.filter.groupIndex = -1;
			b2BodyDef bd;
			
			bd.position = left; // original position of wheel
			wheelLeft = m_world->CreateBody(&bd);
			wheelLeft->CreateShape(&sd);
			wheelLeft->SetMassFromShapes();
			//m_wheels.push_back(m_world->CreateBody(&bd));
			//m_wheels.back()->CreateShape(&sd);
			//m_wheels.back()->SetMassFromShapes();
		}
			// motor
			{
				b2RevoluteJointDef jd;
				
				b2Vec2 pos = left + bodyStartHeight; // position of joint
				
				jd.Initialize(wheelLeft, body, pos);
				jd.collideConnected = false;
				if (rand() % 2) {
					jd.motorSpeed = m_motorSpeed;
				}
				else {
					jd.motorSpeed = -m_motorSpeed;
				}
				jd.maxMotorTorque = 400.0f;
				jd.enableMotor = m_motorOn;
				jointLeft = (b2RevoluteJoint*)m_world->CreateJoint(&jd);
				//m_motorJoints.push_back((b2RevoluteJoint*)m_world->CreateJoint(&jd));
			}
		
		// wheel 2
		b2Vec2 right(bodyWidth, 0.0f);
		{
			b2CircleDef sd;
			sd.density = 1.0f;
			sd.radius = 0.5f;
			sd.filter.groupIndex = -1;
			b2BodyDef bd;
			
			bd.position = right; // original position of wheel
			wheelRight = m_world->CreateBody(&bd);
			wheelRight->CreateShape(&sd);
			wheelRight->SetMassFromShapes();
			//m_wheels.push_back(m_world->CreateBody(&bd));
			//m_wheels.back()->CreateShape(&sd);
			//m_wheels.back()->SetMassFromShapes();
		}
			// motor
			{
				b2RevoluteJointDef jd;
				
				b2Vec2 pos = right + bodyStartHeight;
				
				jd.Initialize(wheelRight, body, pos);
				jd.collideConnected = false;
				if (rand() % 2) {
					jd.motorSpeed = m_motorSpeed;
				}
				else {
					jd.motorSpeed = -m_motorSpeed;
				}
				jd.maxMotorTorque = 400.0f;
				jd.enableMotor = m_motorOn;
				jointRight = (b2RevoluteJoint*)m_world->CreateJoint(&jd);
				//m_motorJoints.push_back((b2RevoluteJoint*)m_world->CreateJoint(&jd));
			}
		
		//for (int i = 0; i < n_motors; i++) {
			// wheel
			/*{
				b2CircleDef sd;
				sd.density = 1.0f;
				sd.radius = 0.5f;
				sd.filter.groupIndex = -1;
				b2BodyDef bd;
				
				b2Vec2 pos = GetPosition(pivot, m_offset);
				
				bd.position = pos; // pivot + m_offset + left + left + left;
				m_wheels.push_back(m_world->CreateBody(&bd));
				m_wheels.back()->CreateShape(&sd);
				m_wheels.back()->SetMassFromShapes();
			}*/
			// motor
			/*{
				b2RevoluteJointDef jd;
				b2Vec2 pos = GetPosition(pivot, m_offset);
				jd.Initialize(m_wheels.back(), m_chassis, pos);
				jd.collideConnected = false;
				if (rand() % 2) {
					jd.motorSpeed = m_motorSpeed;
				}
				else {
					jd.motorSpeed = -m_motorSpeed;
				}
				jd.maxMotorTorque = 400.0f;
				jd.enableMotor = m_motorOn;
				m_motorJoints.push_back((b2RevoluteJoint*)m_world->CreateJoint(&jd));
			}
		}*/
	}
	
	// Get random position a little bit offset from centre
	/*b2Vec2 GetPosition(b2Vec2 pivot, b2Vec2 m_offset) {
		b2Vec2 left(-1.0f, 0.0f);
		b2Vec2 right(1.0f, 0.0f);
		
		LR dir = LeftOrRight();
		int dist = rand() % max_dist + 1; // [1..maxdist]
		b2Vec2 pos = pivot + m_offset;
		for (int j = 0; j < dist; j++) {
			if (dir == LEFT) { pos = pos + left; }
			else { pos = pos + right; }
		}
		return pos;
	}*/
	
	/*LR LeftOrRight() {
		if (rand() % 2 == 1) {
			return RIGHT;
		}
		else {
			return LEFT;
		}
	}*/

	void Keyboard(unsigned char key)
	{
		switch (key)
		{
		case 0:
			break;
		}
	}

	void Step(Settings* settings)
	{
		Test::Step(settings);
	}

	static Test* Create()
	{
		return new SBI;
	}

	
	private:
		Neural *network;
		// network settings;
		static const int inNodes = 4;
		static const int hiddenNodes = 12;
		static const int outNodes = 4;
		static const int iterations = 10;
		
		// figure parameters
		float32 bodyHeight;
		b2Vec2 halfBodyHeight;
		float32 bodyWidth;
		b2Vec2 halfBodyWidth;
		
		b2Vec2 bodyStartHeight;
		
		// geometric constructs
		b2Body* body;
		b2Body* wheelLeft;
		b2Body* wheelRight;
		b2RevoluteJoint* jointLeft;
		b2RevoluteJoint* jointRight;
		
		//b2Vec2 m_offset;
		//b2Body* m_chassis;
		//list<b2Body*> m_wheels;
		//list<b2RevoluteJoint*> m_motorJoints;
		bool m_motorOn;
		float32 m_motorSpeed;
		//int n_motors;
		//int max_dist;
};

#endif
